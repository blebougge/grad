# readItems - no arg
{'and': 'AND_LG', 'int': 'INTEGER', 'ary': 'ARRAY_DECLARATION', 'eq': 'EQUAL_LG', 'if': 'CONDITIONAL', '#': 'COMMENT', 'end': 'END_BRACKET', ')': 'END_PAR', '(': 'START_PAR', 'fix': 'CONST_VAR', '*': 'MULT_OP', '-': 'MINUS_OP', ',': 'COMMA', '/': 'DIV_OP', 'write': 'WRITE_FUNC', 'read': 'READ_FUNC', 'prog': 'PROG_DEF', ':': 'DEFINITION', '=': 'EQUAL_OP', '>': 'GREATER_LG', 'begin': 'START_BRACKET', '!=': 'NOT_EQUAL_LG', 'bl': 'BOOLEAN', 'not': 'NOT_LG', 'dob': 'DOUBLE', 'or': 'OR_LG', 'while': 'LOOP', 'str': 'STRING', '+': 'SUM_OP'}
# readItems - correct use
{'and': 'AND_LG', 'int': 'INTEGER', 'ary': 'ARRAY_DECLARATION', 'eq': 'EQUAL_LG', 'if': 'CONDITIONAL', '#': 'COMMENT', 'end': 'END_BRACKET', ')': 'END_PAR', '(': 'START_PAR', 'fix': 'CONST_VAR', '*': 'MULT_OP', '-': 'MINUS_OP', ',': 'COMMA', '/': 'DIV_OP', 'write': 'WRITE_FUNC', 'read': 'READ_FUNC', 'prog': 'PROG_DEF', ':': 'DEFINITION', '=': 'EQUAL_OP', '>': 'GREATER_LG', 'begin': 'START_BRACKET', '!=': 'NOT_EQUAL_LG', 'bl': 'BOOLEAN', 'not': 'NOT_LG', 'dob': 'DOUBLE', 'or': 'OR_LG', 'while': 'LOOP', 'str': 'STRING', '+': 'SUM_OP'}

# tokenizer - lexars
{0: '<# caian 05/11/2015, COMMENT>', 1: '<prog, PROG_DEF>', 2: '<lang.in, ???>', 3: '<fix, CONST_VAR>', 4: '<int, INTEGER>', 5: '<:, DEFINITION>', 6: '<id, ???>', 7: '<=, EQUAL_OP>', 8: '<1, ???>', 9: '<fix, CONST_VAR>', 10: '<str, STRING>', 11: '<:, DEFINITION>', 12: '<f.out, ???>', 13: '<=, EQUAL_OP>', 14: '<"file_name", ???>', 15: '<begin, START_BRACKET>', 16: '<int, INTEGER>', 17: '<:, DEFINITION>', 18: '<x, ???>', 19: '<=, EQUAL_OP>', 20: '<2, ???>', 21: '<x, ???>', 22: '<=, EQUAL_OP>', 23: '<x, ???>', 24: '<+, SUM_OP>', 25: '<id, ???>', 26: '<if, CONDITIONAL>', 27: '<(, START_PAR>', 28: '<x, ???>', 29: '<>, GREATER_LG>', 30: '<2, ???>', 31: '<), END_PAR>', 32: '<), END_PAR>', 33: '<begin, START_BRACKET>', 34: '<write, WRITE_FUNC>', 35: '<(, START_PAR>', 36: '<file_name, ???>', 37: '<,, COMMA>', 38: '<,, COMMA>', 39: '<x, ???>', 40: '<), END_PAR>', 41: '<), END_PAR>', 42: '<end, END_BRACKET>', 43: '<str, STRING>', 44: '<:, DEFINITION>', 45: '<file, ???>', 46: '<if, CONDITIONAL>', 47: '<(, START_PAR>', 48: '<x, ???>', 49: '<eq, EQUAL_LG>', 50: '<2, ???>', 51: '<), END_PAR>', 52: '<), END_PAR>', 53: '<begin, START_BRACKET>', 54: '<file, ???>', 55: '<=, EQUAL_OP>', 56: '<read, READ_FUNC>', 57: '<(, START_PAR>', 58: '<file_name, ???>', 59: '<), END_PAR>', 60: '<), END_PAR>', 61: '<end, END_BRACKET>', 62: '<end, END_BRACKET>'}
