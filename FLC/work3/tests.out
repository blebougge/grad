# FIRST
<FUNC> := write read 
<DCLR_VAR> := TYPE 
<BLOCK> := begin 
<FUNC_NAME> := write read 
<EXPR> := TYPE ID write read 
<FLN> := ID write read 
<PROG'> := fix begin 
<VAR> := CONST ID 
<IF> := if 
<FIX> := fix 
<LOGIC> := ID CONST 
<NUMERIC> := ID CONST 
<PROG> := # 
<LOGIC'> := LOG & 
<BODY> := & TYPE ID write read if while 
<PARAM> := ID CONST & 
<WHILE> := while 
<NUMERIC'> := OP & 
<PARAM'> := , & 

# FOLLOW
<FUNC> := ; 
<DCLR_VAR> := ; begin 
<BLOCK> := $ TYPE ID write read if while end 
<FUNC_NAME> := ( 
<EXPR> := end 
<FLN> := ; 
<PROG'> := $ 
<VAR> := ; begin 
<IF> := end 
<FIX> := begin 
<LOGIC> := ; ) 
<NUMERIC> := ; 
<PROG> := $ 
<LOGIC'> := ; ) 
<BODY> := end 
<PARAM> := ) 
<WHILE> := end 
<NUMERIC'> := ; 
<PARAM'> := ) 

# TABLE
<FUNC> := { read : 22 } { write : 22 } 
<DCLR_VAR> := { TYPE : 35 } 
<BLOCK> := { begin : 4 } 
<FUNC_NAME> := { read : 24 } { write : 23 } 
<EXPR> := { ID : 9 } { read : 11 } { write : 11 } { TYPE : 10 } 
<FLN> := { ID : 13 } { read : 12 } { write : 12 } 
<PROG'> := { begin : 3 } { fix : 2 } 
<VAR> := { ID : 36 } 
<IF> := { if : 32 } 
<FIX> := { fix : 34 } 
<LOGIC> := { ID : 14 } { CONST : 15 } 
<NUMERIC> := { ID : 18 } { CONST : 19 } 
<PROG> := { # : 1 } 
<LOGIC'> := { ) : 17 } { ; : 17 } { LOG : 16 } 
<BODY> := { while : 7 } { read : 5 } { end : 8 } { TYPE : 5 } { ID : 5 } { write : 5 } { ; : 8 } { if : 6 } 
<PARAM> := { ID : 25 } { CONST : 26 } { ) : 27 } 
<WHILE> := { while : 33 } 
<VAR'> := { ID : 37 } { read : 38 } { CONST : 37 } 
<PARAM''> := { ID : 30 } { CONST : 31 } 
<NUMERIC'> := { OP : 20 } { ) : 21 } { ; : 21 } 
<PARAM'> := { , : 28 } { ) : 29 } 

# PROD
<FUNC> = {22: ['<FUNC_NAME>', '(', '<PARAM>', ')']}
<DCLR_VAR> = {35: ['TYPE', ':', '<VAR>']}
<BLOCK> = {4: ['begin', ';', '<BODY>', 'end', ';']}
<FUNC_NAME> = {24: ['read'], 23: ['write']}
<EXPR> = {9: ['<VAR>', ';', '<BODY>'], 10: ['<DCLR_VAR>', ';', '<BODY>'], 11: ['<FLN>', ';', '<BODY>']}
<FLN> = {12: ['<FUNC>'], 13: ['<VAR>']}
<PROG'> = {2: ['<FIX>', '<BLOCK>'], 3: ['<BLOCK>']}
<VAR> = {36: ['ID', '=', "<VAR'>"]}
<IF> = {32: ['if', '(', '<LOGIC>', ')', ';', '<BLOCK>', '<BODY>']}
<FIX> = {34: ['fix', '<DCLR_VAR>', ';']}
<LOGIC> = {14: ['ID', "<LOGIC'>"], 15: ['CONST', "<LOGIC'>"]}
<NUMERIC> = {18: ['ID', "<NUMERIC'>"], 19: ['CONST', "<NUMERIC'>"]}
<PROG> = {1: ['#', 'ID', ';', 'prog', 'ID', ';', "<PROG'>"]}
<LOGIC'> = {16: ['LOG', '<LOGIC>'], 17: ['&']}
<BODY> = {8: ['&'], 5: ['<EXPR>'], 6: ['<IF>'], 7: ['<WHILE>']}
<PARAM> = {25: ['ID', "<PARAM'>"], 26: ['CONST', "<PARAM'>"], 27: ['&']}
<WHILE> = {33: ['while', '(', '<LOGIC>', ')', ';', '<BLOCK>', '<BODY>']}
<VAR'> = {37: ['<NUMERIC>'], 38: ['<FUNC>']}
<PARAM''> = {30: ['ID', "<PARAM'>"], 31: ['CONST', "<PARAM'>"]}
<NUMERIC'> = {20: ['OP', '<NUMERIC>'], 21: ['&']}
<PARAM'> = {28: [',', "<PARAM''>"], 29: ['&']}

# lang.out -> dictionary
{1: ['#', 'COMMENT'], 2: ['caian', '???'], 3: [';', 'IDENT'], 4: ['prog', 'PROG'], 5: ['lang.in', '???'], 6: [';', 'IDENT'], 7: ['fix', 'CONST_VAR'], 8: ['int', 'TYPE'], 9: [':', 'DEF'], 10: ['id', '???'], 11: ['=', 'EQ_OP'], 12: ['1', 'CONST'], 13: [';', 'IDENT'], 14: ['begin', 'BEGIN'], 15: [';', 'IDENT'], 16: ['str', 'TYPE'], 17: [':', 'DEF'], 18: ['f.out', '???'], 19: ['=', 'EQ_OP'], 20: ['"file_name"', '???'], 21: [';', 'IDENT'], 22: ['int', 'TYPE'], 23: [':', 'DEF'], 24: ['x', '???'], 25: ['=', 'EQ_OP'], 26: ['2', 'CONST'], 27: [';', 'IDENT'], 28: ['x', '???'], 29: ['=', 'EQ_OP'], 30: ['x', '???'], 31: ['+', 'OP'], 32: ['id', '???'], 33: [';', 'IDENT'], 34: ['if', 'IF'], 35: ['(', 'ST_PAR'], 36: ['x', '???'], 37: ['>', 'LOG'], 38: ['2', 'CONST'], 39: [')', 'END_PAR'], 40: [';', 'IDENT'], 41: ['begin', 'BEGIN'], 42: [';', 'IDENT'], 43: ['write', 'FUNC'], 44: ['(', 'ST_PAR'], 45: ['file_name', '???'], 46: [',', 'COMMA'], 47: ['x', '???'], 48: [')', 'END_PAR'], 49: [';', 'IDENT'], 50: ['end', 'END'], 51: [';', 'IDENT'], 52: ['if', 'IF'], 53: ['(', 'ST_PAR'], 54: ['x', '???'], 55: ['eq', 'LOG'], 56: ['20', 'CONST'], 57: [')', 'END_PAR'], 58: [';', 'IDENT'], 59: ['begin', 'BEGIN'], 60: [';', 'IDENT'], 61: ['str', 'TYPE'], 62: [':', 'DEF'], 63: ['file', '???'], 64: ['=', 'EQ_OP'], 65: ['read', 'FUNC'], 66: ['(', 'ST_PAR'], 67: ['file_name', '???'], 68: [')', 'END_PAR'], 69: [';', 'IDENT'], 70: ['end', 'END'], 71: [';', 'IDENT'], 72: ['end', 'END'], 73: [';', 'IDENT']}